<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Qing's Blogs</title><link href="http://www.yuqingzhang.com" rel="alternate"></link><link href="http://www.yuqingzhang.com/feeds/my%20blog.atom.xml" rel="self"></link><id>http://www.yuqingzhang.com</id><updated>2012-11-02T00:00:00+01:00</updated><entry><title>Continuous Delivery Windows Azure Project by Team Foundation Service</title><link href="http://www.yuqingzhang.com/continuous-delivery-windows-azure-project-by-team-foundation-service.html" rel="alternate"></link><updated>2012-11-02T00:00:00+01:00</updated><author><name>Qing</name></author><id>http://www.yuqingzhang.com/continuous-delivery-windows-azure-project-by-team-foundation-service.html</id><summary type="html">&lt;p&gt;In my recent Windows Azure project, I’m using the Team Foundation Service &lt;a class="reference external" href="http://tfs.visualstudio.com/en-us/"&gt;http://tfs.visualstudio.com/en-us/&lt;/a&gt; for the project planning, source code control, etc. It is also possible to deploy the project continuously to Windows Azure .http://www.windowsazure.com/en-us/develop/net/common-tasks/publishing-with-tfs/&lt;/p&gt;
&lt;p&gt;Pretty cool. However, I have a Staging configuration and a Prod configuration in my project. Both need to be deployed to Windows Azure, and each has its own cscfg and csdef file(for different storage connection strings, certificates, etc). My goal is that to make the build script be able to pick the cscfg and csdef for the corresponding configuration.&lt;/p&gt;
&lt;p&gt;I added the cscfg files followed by Joel’s post &lt;a class="reference external" href="http://blog.slalom.com/2011/08/19/building-and-deploying-windows-azure-projects-using-msbuild-and-tfs-2010/"&gt;http://blog.slalom.com/2011/08/19/building-and-deploying-windows-azure-projects-using-msbuild-and-tfs-2010/&lt;/a&gt; and changed my build process as below for staging for instance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="images/continuous-delivery-windows-azure-project-by-team-foundation-service-1.png" src="images/continuous-delivery-windows-azure-project-by-team-foundation-service-1.png" /&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Team Foundation Service picked the staging.cscfg file correctly, but it failed to use the staging.csdef. I followed the steps Joel mentioned in his post for the definition file, but TFS always used the csdef file which I defined in the ItemGroup which includes the cscfg files.&lt;/p&gt;
&lt;p&gt;To solve this, I added a pre-build event for the Windows Azure project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;copy /Y &amp;quot;$(ProjectDir)ServiceDefinition.$(ConfigurationName).csdef&amp;quot; &amp;quot;$(ProjectDir)ServiceDefinition.csdef&amp;quot;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But there is another problem. If the ServiceDefiniton has already been in the TFS build folder, the access to replace this file may be denied. So what I did was that I removed ServiceDefiniton.csdef from the source control and that solved the problem.&lt;/p&gt;
&lt;p&gt;Now, I can happily deploy my project to the staging and prod environment with different cscfg and csdef files.&lt;/p&gt;
</summary><category term="Windows Azure"></category><category term="Team Foundation Service"></category></entry><entry><title>Tips on Hosting WCF 4 on IIS6</title><link href="http://www.yuqingzhang.com/tips-on-hosting-wcf-4-on-iis6.html" rel="alternate"></link><updated>2012-09-07T00:00:00+02:00</updated><author><name>Qing</name></author><id>http://www.yuqingzhang.com/tips-on-hosting-wcf-4-on-iis6.html</id><summary type="html">&lt;p&gt;In my last project, I had to host a WCF 4 project on IIS6. It was not as straightforward as on IIS7.So I took some notes for my own sake.&lt;/p&gt;
&lt;div class="section" id="application-pool"&gt;
&lt;h2&gt;Application Pool&lt;/h2&gt;
&lt;p&gt;On my test/prod servers, a default website using .NET 2 has already been hosted. So I created a new virtual directory under the root of that website and put the new WCF web services in that virtual directory.&lt;/p&gt;
&lt;p&gt;The trick was the virtual directory should not use the same application pool as the default website. This is because it is not able to run two different .NET versions in the same application pool.&lt;/p&gt;
&lt;p&gt;The solution was to create a new Application Pool which is only for the application using .NET4 and pointing the WCF services to the new application pool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="privilege-issues"&gt;
&lt;h2&gt;Privilege Issues&lt;/h2&gt;
&lt;p&gt;I experienced several issues regarding to privilege during the hosting. Basically there are several steps that need to be done.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Enable .NET 4 aspnet_isapi&lt;/p&gt;
&lt;p&gt;Execute the following command.&lt;/p&gt;
&lt;img alt="images/tips-on-hosting-wcf4-on-iis6-1.jpg" src="images/tips-on-hosting-wcf4-on-iis6-1.jpg" /&gt;
&lt;p&gt;If you see the status of .NET4 aspnet_isapi.dll is 0, you need to enable it.&lt;/p&gt;
&lt;img alt="images/tips-on-hosting-wcf4-on-iis6-2.jpg" src="images/tips-on-hosting-wcf4-on-iis6-2.jpg" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add read permission for NETWORK_SERVICE to your virtual directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;If the WCF services need the access to X.509 certificate, you should following the steps described in this post:  &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/aa702621.aspx"&gt;http://msdn.microsoft.com/en-us/library/aa702621.aspx&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-custom-servicehostfactory"&gt;
&lt;h2&gt;A Custom ServiceHostFactory&lt;/h2&gt;
&lt;p&gt;When I fixed all those privilege issues, I was able to see the service page in the browser. However, the web services URL was using my machine name instead of the IP address. This made it impossible to call the web services from the client side.&lt;/p&gt;
&lt;p&gt;The solution is to create a custom ServiceHostFactory and force the web services to use the address which you have specified.&lt;/p&gt;
&lt;p&gt;Here is the code snippet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyServiceFactory&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ServiceHostFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;ServiceHost&lt;/span&gt; &lt;span class="nf"&gt;CreateServiceHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;serviceType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;baseAddresses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyServiceHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baseAddresses&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyServiceHost&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ServiceHost&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;GSTRServiceHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;serviceType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;params&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;baseAddresses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetBaseAddresses&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ApplyConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ApplyConfiguration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// read base addresses from AppSettings in config&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;GetBaseAddresses&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addresses&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;AddBaseAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BaseAddress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;AddBaseAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigurationManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppSettings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, I defined the BaseAddress in my web.config file.&lt;/p&gt;
&lt;p&gt;In the .svc file, we point the factory to the custom factory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;%@ ServiceHost Language=&amp;quot;C#&amp;quot; Debug=&amp;quot;true&amp;quot; Service=&amp;quot;Service.MyService&amp;quot; Factory=&amp;quot;Service.MyServiceFactory&amp;quot;  %&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By doing this, you are able to change the BaseAddress easily.&lt;/p&gt;
&lt;/div&gt;
</summary><category term=".NET"></category><category term="WCF"></category><category term="IIS"></category></entry><entry><title>Lessons Learned from VSTO2010 Development</title><link href="http://www.yuqingzhang.com/lessons-learned-from-vsto2010-development.html" rel="alternate"></link><updated>2012-08-24T00:00:00+02:00</updated><author><name>Qing</name></author><id>http://www.yuqingzhang.com/lessons-learned-from-vsto2010-development.html</id><summary type="html">&lt;p&gt;In the last few months, I have been involving in a project which uses Excel Add-in (VSTO 2010) as the user interface.&lt;/p&gt;
&lt;p&gt;Basically, there is no vast difference between VSTO development and WinForm development. However, there were some tricks/tips that I learned.&lt;/p&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;I deployed the project using Windows Installer, which followed this article:
&lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/ff937654.aspx"&gt;http://msdn.microsoft.com/en-us/library/ff937654.aspx&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="app-config"&gt;
&lt;h2&gt;App.config&lt;/h2&gt;
&lt;p&gt;Not like WinForm, all the VSTO2010 Add-in uses the app.config which comes with Microsoft Office. Take my project for instance, I created an app.config for the Excel Add-in and it worked perfectly in the development environment. But it failed to read that app.config after it was installed by the .msi package.&lt;/p&gt;
&lt;p&gt;To fix this, right click the installer project, choose View-&amp;gt;Registry. Under the User/Machine Hive, find the Manifest of your application and add &lt;a class="reference external" href="file:///"&gt;file:///&lt;/a&gt; to the value.&lt;/p&gt;
&lt;p&gt;The incorrect form: [TARGETDIR]Addin.vsto|vstolocal .&lt;/p&gt;
&lt;p&gt;The correct form: &lt;a class="reference external" href="file:///"&gt;file:///&lt;/a&gt; [TARGETDIR]Addin.vsto|vstolocal&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Typically, user needs to install .NET 4 Client Profile and VSTO Runtime before installing the Add-in.&lt;/p&gt;
&lt;p&gt;But I received several installation failure feedbacks from our customers. They are all using Office 2007 sp2 and it turns out that if you are using that version of Office, besides the two standard perquisites, an additional hotfix is also needed.  &lt;a class="reference external" href="http://support.microsoft.com/kb/976477/"&gt;http://support.microsoft.com/kb/976477/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term=".NET"></category><category term="VSTO2010"></category></entry><entry><title>How To Use WCF Username Authentication</title><link href="http://www.yuqingzhang.com/how-to-use-wcf-username-authentication.html" rel="alternate"></link><updated>2012-04-25T00:00:00+02:00</updated><author><name>Qing</name></author><id>http://www.yuqingzhang.com/how-to-use-wcf-username-authentication.html</id><summary type="html">&lt;p&gt;This post describes the steps to use WCF username authentication.&lt;/p&gt;
&lt;div class="section" id="the-goal"&gt;
&lt;h2&gt;The goal&lt;/h2&gt;
&lt;p&gt;The goal is to let the WCF services authenticate the client's identity based on the username and password. Here, the usernames and passwords are saved in a database created by ASP.NET membership provider.&lt;/p&gt;
&lt;p&gt;To achieve the goal, it is needed to configure both the server side and the client side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="server-side"&gt;
&lt;h2&gt;Server Side&lt;/h2&gt;
&lt;p&gt;The WCF service are hosted by ASP.NET/IIS7. All the WCF configurations are defined in a Web.config file.&lt;/p&gt;
&lt;p&gt;The &amp;lt;services /&amp;gt; part in the Web.config file is like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;services&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt; &lt;span class="na"&gt;behaviorConfiguration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CustomValidator&amp;quot;&lt;/span&gt;
           &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyServiceLib.Compression&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span class="na"&gt;address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wsHttpBinding&amp;quot;&lt;/span&gt;
           &lt;span class="na"&gt;bindingConfiguration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wsHttpWithMessageSecurity&amp;quot;&lt;/span&gt;
                   &lt;span class="na"&gt;contract=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyServiceLib.Contracts.ICompression&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span class="na"&gt;address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mex&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mexHttpBinding&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;contract=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IMetadataExchange&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/services&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The root endpoint address is the root of the IIS site on which it was hosted. To use username authentication it needs wsHttpBinding. The bindingConfiguration indicates that there is a binding called wsHttpMessageSecurity, which is like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;bindings&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;wsHttpBinding&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;binding&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wsHttpWithMessageSecurity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;security&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;message&lt;/span&gt; &lt;span class="na"&gt;clientCredentialType=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/wsHttpBinding&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bindings&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The security mode is Message (so no https needed, https is necessary for Transport), and the clientCrentialtype is UserName.&lt;/p&gt;
&lt;p&gt;The service section in Web.config file also includes a behaviorConfiguration called CustomValidator. The definition of it is like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;behaviors&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;serviceBehaviors&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;behavior&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CustomValidator&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;serviceMetadata&lt;/span&gt; &lt;span class="na"&gt;httpGetEnabled=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;serviceCredentials&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;serviceCertificate&lt;/span&gt;
                  &lt;span class="na"&gt;findValue=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;19 00 fd 20 78 fd 2c 2d c5 83 16 50 28 c2 67 e5 ff dc d4 77&amp;quot;&lt;/span&gt;
                  &lt;span class="na"&gt;x509FindType=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FindByThumbprint&amp;quot;&lt;/span&gt;
                  &lt;span class="na"&gt;storeLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;LocalMachine&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;storeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;userNameAuthentication&lt;/span&gt; &lt;span class="na"&gt;userNamePasswordValidationMode =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MembershipProvider&amp;quot;&lt;/span&gt;
                                &lt;span class="na"&gt;membershipProviderName =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AspNetSqlMembershipProvider&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/serviceCredentials&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/behavior&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/serviceBehaviors&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/behaviors&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The interesting part is the &amp;lt;serviceCertificate /&amp;gt;. It points to an X.509 certificate installed on the server, the certificate can be found on Local ComputerPersonalCertificates by its thumbprint.&lt;/p&gt;
&lt;p&gt;WCF insists that the services must use an X.509 certificate to encrypt the username and password to the services and the certificate must contain a private key. A temporary certificate can be used during the development phase. To create and install the certificate, the steps are described here: &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/ff647171.aspx"&gt;http://msdn.microsoft.com/en-us/library/ff647171.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One thing that needs to be noticed is that IIS7/IIS7.5 using ApplicationPoolIdentity instead of NetworkService as the Identity. To change it, start the IIS manager, click Application Pools and find DefaultAppPool, on the right panel, click Advanced Settings…, find Process Model, and then change the Identity to NetworkService.&lt;/p&gt;
&lt;p&gt;When debug the application, it may needed to add the following section into &amp;lt;behavior /&amp;gt; and check the error in Event Viewer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;serviceSecurityAudit&lt;/span&gt; &lt;span class="na"&gt;auditLogLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Application&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;serviceAuthorizationAuditLevel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failure&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;messageAuthenticationAuditLevel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failure&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;suppressAuditFailure=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Refer to &lt;a class="reference external" href="http://devworkexperience.com/tag/servicesecurityaudit/"&gt;http://devworkexperience.com/tag/servicesecurityaudit/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A custom validation for the username can be used. To achieve this, create a new .cs file in the ASP.NET project. Add a new class inherits from UserNamePasswordValidator and override the Validate method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomValidator&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UserNamePasswordValidator&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// peform&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;Membership&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValidateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SecurityTokenException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unknown Username or Incorrect Password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then replace the userNameAuthentication section with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;userNameAuthentication&lt;/span&gt; &lt;span class="na"&gt;userNamePasswordValidationMode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Custom&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;customUserNamePasswordValidatorType=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyServiceSite.Authentication.CustomValidator,MyServiceSite&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Besides, the membership provider needs to use Forms authentication mode instead of Windows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;authentication&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Forms&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the server side is ready.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-client"&gt;
&lt;h2&gt;The Client&lt;/h2&gt;
&lt;p&gt;On the client side, add a service reference to the client application. Basically it takes care of the configurations automatically and nicely.&lt;/p&gt;
&lt;p&gt;Here is an example of how to call the WCF services in the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ServiceClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ServiceClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigurationManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppSettings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyWebServiceUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigurationManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppSettings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IdentityDNS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EndpointAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConfigurationManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppSettings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyServiceUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                &lt;span class="n"&gt;DnsEndpointIdentity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateDnsIdentity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConfigurationManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppSettings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IdentityDNS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientCredentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientCredentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's all.&lt;/p&gt;
&lt;/div&gt;
</summary><category term=".NET"></category><category term="WCF"></category></entry></feed>